[
    {
        "id": "tab_201",
        "type": "tab",
        "label": "Slave 0x201 Flow",
        "disabled": false,
        "info": "Flow for slave 0x201"
    },
    {
        "id": "mqtt_in_201",
        "type": "mqtt in",
        "z": "tab_201",
        "name": "MQTT In Commands",
        "topic": "commands/can",
        "qos": "1",
        "datatype": "json",
        "broker": "mqtt_broker",
        "x": 120,
        "y": 100,
        "wires": [
            [
                "fn_201"
            ]
        ]
    },
    {
        "id": "fn_201",
        "type": "function",
        "z": "tab_201",
        "name": "Process 0x201 Commands",
        "func": "var cmd = msg.payload.command;\n\nif(cmd === 'all_nozzles'){\n    node.log('Slave 0x201 applying global all_nozzles: ' + msg.payload.state);\n    msg.topic = 'nozzles';\n    msg.payload = { slave: '0x201', command: 'all_nozzles', state: msg.payload.state };\n    return msg;\n} else if (cmd === 'recording'){\n    node.log('Slave 0x201 applying global recording: ' + msg.payload.state);\n    msg.topic = 'recording';\n    msg.payload = { slave: '0x201', command: 'recording', state: msg.payload.state };\n    return msg;\n} else if (cmd === 'sensitivity'){\n    node.log('Slave 0x201 setting sensitivity to: ' + msg.payload.value);\n    msg.topic = 'sensitivity';\n    msg.payload = { slave: '0x201', command: 'sensitivity', value: Number(msg.payload.value) };\n    return msg;\n} else if (cmd === 'files'){\n    node.log('Slave 0x201 setting files to: ' + msg.payload.value);\n    msg.topic = 'files';\n    msg.payload = { slave: '0x201', command: 'files', value: Number(msg.payload.value) };\n    return msg;\n} else if (cmd === 'spot_spray'){\n    if(msg.payload.slave === '0x201'){\n         node.log('Slave 0x201 applying spot spray: ' + msg.payload.state);\n         msg.topic = 'spot_spray';\n         return msg;\n    } else {\n         return null;\n    }\n} else {\n   return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 100,
        "wires": [
            [
                "debug_201"
            ]
        ]
    },
    {
        "id": "debug_201",
        "type": "debug",
        "z": "tab_201",
        "name": "Debug 0x201",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "json",
        "x": 520,
        "y": 100,
        "wires": []
    },
    {
        "id": "tab_202",
        "type": "tab",
        "label": "Slave 0x202 Flow",
        "disabled": false,
        "info": "Flow for slave 0x202"
    },
    {
        "id": "mqtt_in_202",
        "type": "mqtt in",
        "z": "tab_202",
        "name": "MQTT In Commands",
        "topic": "commands/can",
        "qos": "1",
        "datatype": "json",
        "broker": "mqtt_broker",
        "x": 120,
        "y": 100,
        "wires": [
            [
                "fn_202"
            ]
        ]
    },
    {
        "id": "fn_202",
        "type": "function",
        "z": "tab_202",
        "name": "Process 0x202 Commands",
        "func": "var cmd = msg.payload.command;\n\nif(cmd === 'all_nozzles'){\n    node.log('Slave 0x202 applying global all_nozzles: ' + msg.payload.state);\n    msg.topic = 'nozzles';\n    msg.payload = { slave: '0x202', command: 'all_nozzles', state: msg.payload.state };\n    return msg;\n} else if (cmd === 'recording'){\n    node.log('Slave 0x202 applying global recording: ' + msg.payload.state);\n    msg.topic = 'recording';\n    msg.payload = { slave: '0x202', command: 'recording', state: msg.payload.state };\n    return msg;\n} else if (cmd === 'sensitivity'){\n    node.log('Slave 0x202 setting sensitivity to: ' + msg.payload.value);\n    msg.topic = 'sensitivity';\n    msg.payload = { slave: '0x202', command: 'sensitivity', value: Number(msg.payload.value) };\n    return msg;\n} else if (cmd === 'files'){\n    node.log('Slave 0x202 setting files to: ' + msg.payload.value);\n    msg.topic = 'files';\n    msg.payload = { slave: '0x202', command: 'files', value: Number(msg.payload.value) };\n    return msg;\n} else if (cmd === 'spot_spray'){\n    if(msg.payload.slave === '0x202'){\n         node.log('Slave 0x202 applying spot spray: ' + msg.payload.state);\n         msg.topic = 'spot_spray';\n         return msg;\n    } else {\n         return null;\n    }\n} else {\n   return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 100,
        "wires": [
            [
                "debug_202"
            ]
        ]
    },
    {
        "id": "debug_202",
        "type": "debug",
        "z": "tab_202",
        "name": "Debug 0x202",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "json",
        "x": 520,
        "y": 100,
        "wires": []
    },
    {
        "id": "tab_203",
        "type": "tab",
        "label": "Slave 0x203 Flow",
        "disabled": false,
        "info": "Flow for slave 0x203"
    },
    {
        "id": "mqtt_in_203",
        "type": "mqtt in",
        "z": "tab_203",
        "name": "MQTT In Commands",
        "topic": "commands/can",
        "qos": "1",
        "datatype": "json",
        "broker": "mqtt_broker",
        "x": 120,
        "y": 100,
        "wires": [
            [
                "fn_203"
            ]
        ]
    },
    {
        "id": "fn_203",
        "type": "function",
        "z": "tab_203",
        "name": "Process 0x203 Commands",
        "func": "var cmd = msg.payload.command;\n\nif(cmd === 'all_nozzles'){\n    node.log('Slave 0x203 applying global all_nozzles: ' + msg.payload.state);\n    msg.topic = 'nozzles';\n    msg.payload = { slave: '0x203', command: 'all_nozzles', state: msg.payload.state };\n    return msg;\n} else if (cmd === 'recording'){\n    node.log('Slave 0x203 applying global recording: ' + msg.payload.state);\n    msg.topic = 'recording';\n    msg.payload = { slave: '0x203', command: 'recording', state: msg.payload.state };\n    return msg;\n} else if (cmd === 'sensitivity'){\n    node.log('Slave 0x203 setting sensitivity to: ' + msg.payload.value);\n    msg.topic = 'sensitivity';\n    msg.payload = { slave: '0x203', command: 'sensitivity', value: Number(msg.payload.value) };\n    return msg;\n} else if (cmd === 'files'){\n    node.log('Slave 0x203 setting files to: ' + msg.payload.value);\n    msg.topic = 'files';\n    msg.payload = { slave: '0x203', command: 'files', value: Number(msg.payload.value) };\n    return msg;\n} else if (cmd === 'spot_spray'){\n    if(msg.payload.slave === '0x203'){\n         node.log('Slave 0x203 applying spot spray: ' + msg.payload.state);\n         msg.topic = 'spot_spray';\n         return msg;\n    } else {\n         return null;\n    }\n} else {\n   return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 100,
        "wires": [
            [
                "debug_203"
            ]
        ]
    },
    {
        "id": "debug_203",
        "type": "debug",
        "z": "tab_203",
        "name": "Debug 0x203",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "json",
        "x": 520,
        "y": 100,
        "wires": []
    },
    {
        "id": "tab_204",
        "type": "tab",
        "label": "Slave 0x204 Flow",
        "disabled": false,
        "info": "Flow for slave 0x204"
    },
    {
        "id": "mqtt_in_204",
        "type": "mqtt in",
        "z": "tab_204",
        "name": "MQTT In Commands",
        "topic": "commands/can",
        "qos": "1",
        "datatype": "json",
        "broker": "mqtt_broker",
        "x": 120,
        "y": 100,
        "wires": [
            [
                "fn_204"
            ]
        ]
    },
    {
        "id": "fn_204",
        "type": "function",
        "z": "tab_204",
        "name": "Process 0x204 Commands",
        "func": "var cmd = msg.payload.command;\n\nif(cmd === 'all_nozzles'){\n    node.log('Slave 0x204 applying global all_nozzles: ' + msg.payload.state);\n    msg.topic = 'nozzles';\n    msg.payload = { slave: '0x204', command: 'all_nozzles', state: msg.payload.state };\n    return msg;\n} else if (cmd === 'recording'){\n    node.log('Slave 0x204 applying global recording: ' + msg.payload.state);\n    msg.topic = 'recording';\n    msg.payload = { slave: '0x204', command: 'recording', state: msg.payload.state };\n    return msg;\n} else if (cmd === 'sensitivity'){\n    node.log('Slave 0x204 setting sensitivity to: ' + msg.payload.value);\n    msg.topic = 'sensitivity';\n    msg.payload = { slave: '0x204', command: 'sensitivity', value: Number(msg.payload.value) };\n    return msg;\n} else if (cmd === 'files'){\n    node.log('Slave 0x204 setting files to: ' + msg.payload.value);\n    msg.topic = 'files';\n    msg.payload = { slave: '0x204', command: 'files', value: Number(msg.payload.value) };\n    return msg;\n} else if (cmd === 'spot_spray'){\n    if(msg.payload.slave === '0x204'){\n         node.log('Slave 0x204 applying spot spray: ' + msg.payload.state);\n         msg.topic = 'spot_spray';\n         return msg;\n    } else {\n         return null;\n    }\n} else {\n   return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 100,
        "wires": [
            [
                "debug_204"
            ]
        ]
    },
    {
        "id": "debug_204",
        "type": "debug",
        "z": "tab_204",
        "name": "Debug 0x204",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "json",
        "x": 520,
        "y": 100,
        "wires": []
    },
    {
        "id": "mqtt_broker",
        "type": "mqtt-broker",
        "name": "Local MQTT Broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    }
]
